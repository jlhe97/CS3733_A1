package jherreroestrada;
import ks.client.gamefactory.GameWindow;
import ks.common.games.Solitaire;
import ks.common.model.*;
import ks.common.view.*;
import ks.launcher.Main;

public class MountOlympus  extends Solitaire{

	MultiDeck deck;
	DeckView deckView;
	IntegerView scoreView;
	IntegerView numLeftView;
	
	Column[] columns = new Column[9];
	ColumnView[] columnViews = new ColumnView[9];
	
	// --- columns ----------
	/*
	Column column1;
	ColumnView columnView1;
	
	Column column2;
	ColumnView columnView2;
	
	Column column3;
	ColumnView columnView3;
	
	Column column4;
	ColumnView columnView4;
	
	Column column5;
	ColumnView columnView5;
	
	Column column6;
	ColumnView columnView6;
	
	Column column7;
	ColumnView columnView7;
	
	Column column8;
	ColumnView columnView8;
	
	Column column9;
	ColumnView columnView9;
	*/
	// -----------------------
	
	@Override
	public String getName() {
		return "Mount Olympus";
	}

	@Override
	public boolean hasWon() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void initialize() {
		initializeModel(getSeed());
		initializeView();
		initializeControllers();
		
		
	}

	private void initializeView() {
		CardImages ci = getCardImages();
		int w = ci.getWidth();
		int h = ci.getHeight();
		int delta = ci.getOverlap();
		
		
		// the MultiDeck view and elts
		deckView = new DeckView(deck);
		deckView.setBounds(20, 20, w, h);
		container.addWidget(deckView);
		// ----------------------------
		
		// Score and NumOfCardsLeft views
		scoreView = new IntegerView(getScore());
		scoreView.setFontSize(16);
		scoreView.setBounds(20, 40+h, w, h/2);
		container.addWidget(scoreView);
		
		numLeftView = new IntegerView(getNumLeft());
		numLeftView.setFontSize(16);
		numLeftView.setBounds(20, 100 + (3/2 * h), w, h/2);
		container.addWidget(numLeftView);
		// -------------------------------------
		
		// ---- for loop that makes all of the columnViews ----
		for(int i=0; i < columnViews.length; i++){
			columnViews[i] = new ColumnView(columns[i]);
			columnViews[i].setBounds((20*(i+1)) + (i*w) , 100+(3*h), w, h+12*delta);
			container.addWidget(columnViews[i]);
		}
		// ------------------------------------------------------
		
	}

	private void initializeControllers() {
		
	}

	private void initializeModel(int seed) {
		deck = new MultiDeck("d",2);
		deck.create(seed);
		model.addElement(deck);
		
		// for loop that creates all of the columns
		for(int i = 0; i < columns.length; i++){
			columns[i] = new Column("col" + (i+1));
			model.addElement(columns[i]);
		}
		// --------------------------------------
		
	}
	
	public static void main (String [] args){
		GameWindow gw = Main.generateWindow(new MountOlympus(), Deck.OrderBySuit);
	}

}
