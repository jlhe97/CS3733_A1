package jherreroestrada;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import ks.common.model.Card;
import ks.common.model.Column;
import ks.common.model.Move;
import ks.common.model.Pile;
import ks.common.view.CardView;
import ks.common.view.ColumnView;
import ks.common.view.Container;
import ks.common.view.Widget;

public class MountOlympusPileController extends MouseAdapter{

	protected MountOlympus theGame;
	protected ColumnView columnView;

	public MountOlympusPileController(MountOlympus mountOlympus, ColumnView columnView){
		this.theGame = mountOlympus;
		this.columnView = columnView;
	}
	
//	/**
//	 * This method allows players to click and select a card from one of the columns.
//	 */
//	public void mousePressed(MouseEvent me){
//		Container c = theGame.getContainer();
//
//		ColumnView cards = columnView.getColumnView(me);
//
//		// Tell container which object is being dragged, and where in that widget the user clicked.
//		c.setActiveDraggingObject (cards, me);
//
//		// Tell container which BuildablePileView is the source for this drag event.
//		c.setDragSource (columnView);
//
//		// we simply redraw our source pile to avoid flicker,
//		// rather than refreshing all widgets...
//		columnView.redraw();
//	}
	
	/**
	 * This method allows the player to release and drop a card from one of the columns
	 * to the foundation piles.
	 */
	public void mouseReleased(MouseEvent me) {
Container c = theGame.getContainer();
		
		/** Return if there is no card being dragged chosen. */
		Widget draggingWidget = c.getActiveDraggingObject();
		if (draggingWidget == Container.getNothingBeingDragged()) {
			System.err.println ("FoundationController::mouseReleased() unexpectedly found nothing being dragged.");
			c.releaseDraggingObject();		
			return;
		}

		/** Recover the from BuildablePile OR waste Pile */
		Widget fromWidget = c.getDragSource();
		if (fromWidget == null) {
			System.err.println ("FoundationController::mouseReleased(): somehow no dragSource in container.");
			c.releaseDraggingObject();
			return;
		}

		// Determine the To Pile
		Column tableau = (Column) columnView.getModelElement();
		Pile destination = (Pile) fromWidget.getModelElement();
		
		CardView cardView = (CardView) draggingWidget;
		Card theCard = (Card) cardView.getModelElement();
		
		Move move = new TableauToFoundationMove(tableau, theCard, destination);
		if (move.doMove(theGame)) {
			theGame.pushMove (move);     // Successful Move has been Move
		} else {
			fromWidget.returnWidget (draggingWidget);
		}
		
		// release the dragging object, (this will reset dragSource)
		c.releaseDraggingObject();
		
		// finally repaint
		c.repaint();
	}
	
	

}
