package jherreroestrada;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import ks.common.model.*;
import ks.common.view.*;

public class MountOlympusPileController extends MouseAdapter{

	protected MountOlympus theGame;
	protected PileView src;
	
	public MountOlympusPileController(MountOlympus mountOlympus, PileView src){
		this.theGame = mountOlympus;
		this.src = src;
	}
	
	
	/**
	 * This method allows the player to release and drop a card from one of the columns
	 * to the foundation piles.
	 */
	public void mouseReleased(MouseEvent me) {
		Container c = theGame.getContainer();

		/** Return if there is no card being dragged chosen. */
		Widget draggingWidget = c.getActiveDraggingObject();
		if (draggingWidget == Container.getNothingBeingDragged()) {
			System.err.println ("FoundationController::mouseReleased() unexpectedly found nothing being dragged.");
			c.releaseDraggingObject();		
			return;
		}
		
		ColumnView cw = (ColumnView) draggingWidget;

		/** Recover the from BuildablePile OR waste Pile */
		Widget fromWidget = c.getDragSource();
		if (fromWidget == null) {
			System.err.println ("FoundationController::mouseReleased(): somehow no dragSource in container.");
			c.releaseDraggingObject();
			return;
		}

		// Determine the To Pile
		Pile dest = (Pile) pileView.getModelElement();
		Column src = (Column) fromWidget.getModelElement();

		CardView cardView = (CardView) draggingWidget;
		Card theCard = (Card) cardView.getModelElement();

		Move move = new TableauToFoundationMove(src, theCard, dest);
		if (move.doMove(theGame)) {
			theGame.pushMove (move);     // Successful Move has been Move
		} else {
			fromWidget.returnWidget (draggingWidget);
		}

		// release the dragging object, (this will reset dragSource)
		c.releaseDraggingObject();

		// finally repaint
		c.repaint();
	}



}
